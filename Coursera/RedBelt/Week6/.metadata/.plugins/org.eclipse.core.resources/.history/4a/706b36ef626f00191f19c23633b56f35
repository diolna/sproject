

#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <string>
#include <map>
#include <complex>


using namespace std;

template <typename It>
class IteratorRange {
public:
  IteratorRange(It first, It last) : first(first), last(last) {
  }

  It begin() const {
    return first;
  }

  It end() const {
    return last;
  }

  size_t size() const {
    return last - first;
  }

private:
  It first, last;
};

template <typename Container>
auto Head(Container& c, int top) {

  return IteratorRange(begin(c), begin(c) + min<size_t>(max(top, 0), c.size()));
}


template <typename Container>
string Join(char c, const Container& cont) {
  ostringstream os;
  for (const auto& item : Head(cont, cont.size() - 1)) {
    os << item << c;
  }
  os << *rbegin(cont);
  return os.str();
}



int main() {

	vector<string>  v = {"I like C++\n"};
	string s = "aaa";
	istringstream is(s);
	istream iss(is.rdbuf());
	string a;
	iss>>a;
	istringstream is2(s);
	ostringstream os;
	vector<ostream> vec;
	map<istream, ostream> m;
//	 std::pair<std::istream, std::string> p6(
//	                    std::piecewise_construct,
//	                    std::tuple(move(iss)),
//	                    std::tuple(s));
 	cout << Join('\n', v);
//	IteratorRange c(v.begin(), v.end());
	return 0;
}
