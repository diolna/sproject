

#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <string>
#include <map>
#include <complex>
#include <tuple>


using namespace std;

template <typename It>
class IteratorRange {
public:
  IteratorRange(It first, It last) : first(first), last(last) {
  }

  It begin() const {
    return first;
  }

  It end() const {
    return last;
  }

  size_t size() const {
    return last - first;
  }

private:
  It first, last;
};

template <typename Container>
auto Head(Container& c, int top) {

  return IteratorRange(begin(c), begin(c) + min<size_t>(max(top, 0), c.size()));
}


template <typename Container>
string Join(char c, const Container& cont) {
  ostringstream os;
  for (const auto& item : Head(cont, cont.size() - 1)) {
    os << item << c;
  }
  os << *rbegin(cont);
  return os.str();
}

void FuncPairStream(pair<istream, ostream> p){
	string temp;
	p.first >> temp;
	cout << "temp = " << temp << endl;;
	string temp2;
	//p.second = temp2;
	cout <<  temp2 << "  "<< endl;

}

int main() {

	vector<string>  v = {"I like C++\n"};
	string s = "aaa";
	istringstream is(s);
	ostringstream os(s);

	istream iss(is.rdbuf());

	string a;
	iss>>a;
	cout << "Through  " << a << endl;
	istringstream is2(s);

	ostream oss(os.rdbuf());

	vector<ostream> vec;
	map<istream, ostream> m;
	pair<string, string> p_string;

	 std::pair<std::istringstream, std::ostringstream> p6(
	                    std::piecewise_construct,
	                    std::tuple(move(is)),
	                    std::tuple(move(os))
	 );


    FuncPairStream(p6);
 	cout << Join('\n', v);
//	IteratorRange c(v.begin(), v.end());
	return 0;
}
