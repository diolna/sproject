// main.cpp: определяет точку входа для консольного приложения.
//

//#include "stdafx.h"
#include <memory>
#include <iostream>
#include <stdexcept>
#include <string>
#include <algorithm>


using namespace std;

#include "database.h"
#include "date.h"
#include "condition_parser.h"
#include "node.h"
#include "test_runner.h"
#include <exception>







string ParseEvent(istream& is) {
	// Реализуйте эту функцию
	string s;

	getline(is, s);

	auto it = find_if(s.begin(), s.end(), [](const char& a) {
		return a == ' ';
	});
	while (it == s.begin()) {
		s.erase(it);
		it = find_if(s.begin(), s.end(), [](const char& a) {
			return a == ' ';
		});
	}


	return s;
}


void TestAll();

int main() {
	TestAll();

	Database db;

	for (string line; getline(cin, line); ) {
		istringstream is(line);

		string command;

			is >> command;
			if (command == "Add") {
				try{
				const auto date = ParseDate(is);

				const auto event = ParseEvent(is);


				db.Add(date, event);
			}
			catch (invalid_argument& ia) {
				cout << ia.what() << endl;
			}
			}
		else if (command == "Print") {
			db.Print(cout);
		}
		else if (command == "Del") {
			auto condition = ParseCondition(is);
			auto predicate = [condition](const Date& date, const string& event) {
				return condition->Evaluate(date, event);
			};
			int count = db.RemoveIf(predicate);
			cout << "Removed " << count << " entries" << endl;
		}
		else if (command == "Find") {
			auto condition = ParseCondition(is);
			auto predicate = [condition](const Date& date, const string& event) {
				return condition->Evaluate(date, event);
			};

			const auto entries = db.FindIf(predicate);
			for (const auto& entry : entries) {
				cout << entry << endl;
			}
			cout << "Found " << entries.size() << " entries" << endl;
		}
		else if (command == "Last") {
			try {
				cout << db.Last(ParseDate(is)) << endl;
			}
			catch (invalid_argument&) {
				cout << "No entries" << endl;
			}
		}
		else if (command.empty()) {
			continue;
		}
		else {
			throw logic_error("Unknown command: " + command);
		}
	}
	int ex;
	cin >> ex;
	return 0;
}

void TestParseEvent() {
	{
		istringstream is("event");
		AssertEqual(ParseEvent(is), "event", "Parse event without leading spaces");
	}
	{
		istringstream is("   sport event ");
		AssertEqual(ParseEvent(is), "sport event ", "Parse event with leading spaces");
	}
	{
		istringstream is("  first event  \n  second event");
		vector<string> events;
		events.push_back(ParseEvent(is));
		events.push_back(ParseEvent(is));
		AssertEqual(events, vector<string>{"first event  ", "second event"}, "Parse multiple events");
	}
}

void TestAll() {
	TestRunner tr;
	tr.RunTest(TestParseEvent, "TestParseEvent");
	tr.RunTest(TestParseCondition, "TestParseCondition");
}
